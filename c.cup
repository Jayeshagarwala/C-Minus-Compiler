
import absyn.*;
import symb.*;
import java.util.*;
   
parser code {:
  public String filename;
  public List<String> args;
  public boolean errors = false;

  public parser(String filename, List<String> args, java_cup.runtime.Scanner s) {
    super(s);
    this.filename = filename;
    this.args = args;
  }

  public void report_error(String message, Object info) {
    this.errors = true;
    StringBuffer m = new StringBuffer("Error");
   
    if(info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

      if (s.left >= 0) {                
        m.append(" in line " + (s.left + 1));   
        if (s.right >= 0)                    
          m.append(", column " + (s.right + 1));
      }
    }
    
    m.append(" : " + message);
    System.err.println(m);
  }

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
  }
:};
   
terminal ELSE, IF, INT, RETURN, VOID, WHILE;
terminal PLUS, MINUS, TIMES, OVER, LT, LTEQ, GT, GTEQ, EQ, NOTEQ, ASSIGN;
terminal SEMI, COMMA, LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE;
terminal String ID, NUM;

non terminal DeclarList program, declar_list;
non terminal Declar declar;
non terminal DeclarVar var_declar;
non terminal DeclarFun fun_declar;
non terminal StmtList stmt_list;
non terminal Stmt stmt, exp_stmt, select_stmt, iter_stmt, return_stmt;
non terminal StmtComp comp_stmt;
non terminal DeclarListLocal loc_declar;
non terminal TypeSpec type;
non terminal Params params;
non terminal ParamList param_list;
non terminal Param param;
non terminal ExpList args, arg_list;
non terminal Exp exp, factor;
non terminal ExpVar var;
non terminal ExpCall call;

precedence nonassoc RETURN;
precedence right ASSIGN;
precedence left LT, LTEQ, GT, GTEQ, EQ, NOTEQ; //make nonassoc
precedence left PLUS, MINUS;
precedence left TIMES, OVER;
precedence left ELSE;

  program     ::= declar_list:d
                  {:
                    RESULT = d;
                    if(!this.parser.errors) {
                      for(String arg : this.parser.args) {
                        // print abstract syntax tree
                        if("-a".equals(arg)) {
                          System.out.println("The abstract syntax tree is:");
                          Absyn.showTree(RESULT, 0);
                        }
                        // print symbol tables
                        if("-s".equals(arg)) {
                          System.out.println("The symbol table is:");
                          new SymbolTable().showTable(RESULT, 0);
                        }
                        
                      }
                    }
                    System.out.println("Parse/compile complete");
                  :}
                  ;

  declar_list ::= declar_list:d1 declar:d2
                  {:
                    DeclarList t = d1;
                    if (d1 == null) {
                      d1 = new DeclarList(d2, null);
                      RESULT = d1;
                    }
                    else{
                      while(t.tail != null)
                        t = t.tail;
                      t.tail = new DeclarList(d2, null);
                      RESULT = d1;
                    }
                  :}
                  | declar:d
                  {:
                    RESULT = new DeclarList(d, null);
                  :}
                  ;

  declar      ::= var_declar:d
                  {:
                    RESULT = d;
                  :}
                  | fun_declar:d
                  {:
                    RESULT = d;
                  :}
                  ;

  var_declar  ::= type:t ID:i SEMI
                  {:
                    if(TypeSpec.VOID.equals(t.type)){
                      parser.report_error("Invalid variable declaration: void is not a valid type", t);
                    } else {
                      RESULT = new DeclarVar(tleft, t, i, false);
                    }
                  :}
                  | type:t ID:i LBRACKET NUM:n RBRACKET SEMI
                  {:
                    if(TypeSpec.VOID.equals(t.type)){
                      parser.report_error("Invalid variable declaration: void is not a valid type", t);
                    } else {
                      RESULT = new DeclarVar(tleft, t, i, true, Integer.parseInt(n));
                    }
                  :}
                  | error:e SEMI
                  {:
                    parser.report_error("Invalid variable declaration", e);
                  :}
                  ;

  type        ::= INT:i
                  {:
                    RESULT = new TypeSpec(ileft, TypeSpec.INT);
                  :}
                  | VOID:v
                  {:
                    RESULT = new TypeSpec(vleft, TypeSpec.VOID);
                  :}
                  ;

  fun_declar  ::= type:t ID:i LPAREN params:p RPAREN comp_stmt:c
                  {:
                    RESULT = new DeclarFun(tleft, t, i, p, c);
                  :}
                  | error:e LPAREN params:p RPAREN comp_stmt:c
                  {:
                    parser.report_error("Invalid function declaration", e);
                  :}
                  | type:t ID:i LPAREN error:e RPAREN comp_stmt:c
                  {:
                    parser.report_error("Invalid function declaration", e);
                  :}
                  | type:t ID:i LPAREN params:p RPAREN error:e
                  {:
                    parser.report_error("Invalid function declaration", e);
                  :}
                  ;

  params      ::= param_list:p
                  {:
                    RESULT = new Params(pleft, p);
                  :}
                  | VOID:v
                  {:
                    RESULT = new Params(vleft, null);
                  :}
                  ;

  param_list  ::= param_list:p1 COMMA param:p2
                  {:
                    ParamList t = p1;
                    if (p1 == null) {
                      p1 = new ParamList(p2, null);
                      RESULT = p1;
                    }
                    else{
                      while(t.tail != null)
                        t = t.tail;
                      t.tail = new ParamList(p2, null);
                      RESULT = p1;
                    }
                  :}
                  | param:p
                  {:
                    RESULT = new ParamList(p, null);
                  :}
                  ;

  param       ::= INT:t ID:i
                  {:
                    RESULT = new Param(tleft, new TypeSpec(tleft, TypeSpec.INT), i, false);
                  :}
                  | INT:t ID:i LBRACKET RBRACKET 
                  {:
                    RESULT = new Param(tleft, new TypeSpec(tleft, TypeSpec.INT), i, true);
                  :}
                  ;

  comp_stmt   ::= LBRACE:lb loc_declar:d stmt_list:s RBRACE
                  {:
                    RESULT = new StmtComp(lbleft, d, s);
                  :}
                  ;

  loc_declar  ::= loc_declar:d1 var_declar:d2
                  {:
                    DeclarListLocal t = d1;
                    if (d1 == null) {
                      d1 = new DeclarListLocal(d2, null);
                      RESULT = d1;
                    }
                    else{
                      while(t.tail != null)
                        t = t.tail;
                      t.tail = new DeclarListLocal(d2, null);
                      RESULT = d1;
                    }
                  :}
                  | //empty
                  ;

  stmt_list   ::= stmt_list:s1 stmt:s2
                  {:
                    StmtList t = s1;
                    if (s1 == null) {
                      s1 = new StmtList(s2, null);
                      RESULT = s1;
                    }
                    else{
                      while(t.tail != null)
                        t = t.tail;
                      t.tail = new StmtList(s2, null);
                      RESULT = s1;
                    }
                  :}
                  | //empty
                  ;

  stmt        ::= exp_stmt:s
                  {:
                    RESULT = s;
                  :}
                  | comp_stmt:s
                  {:
                    RESULT = s;
                  :}
                  | select_stmt:s
                  {:
                    RESULT = s;
                  :}
                  | iter_stmt:s
                  {:
                    RESULT = s;
                  :}
                  | return_stmt:s
                  {:
                    RESULT = s;
                  :}
                  | error:e
                  {:
                    parser.report_error("Invalid statement", e);
                  :}
                  ;

  exp_stmt    ::= exp:e SEMI
                  {:
                    RESULT = new StmtExp(eleft, e);
                  :}
                  | SEMI
                  ;

  select_stmt ::= IF:i LPAREN exp:e RPAREN stmt:s
                  {:
                    RESULT = new StmtSelect(ileft, e, s, null);
                  :}
                  | IF:i LPAREN exp:e RPAREN stmt:s1 ELSE stmt:s2
                  {:
                    RESULT = new StmtSelect(ileft, e, s1, s2);
                  :}
                  
                  ;

  iter_stmt   ::= WHILE:w LPAREN exp:e RPAREN stmt:s
                  {:
                    RESULT = new StmtWhile(wleft, e, s);
                  :}
                  ;

  return_stmt ::= RETURN:r SEMI
                  {:
                    RESULT = new StmtReturn(rleft, null);
                  :}
                  | RETURN:r exp:e SEMI
                  {:
                    RESULT = new StmtReturn(rleft, e);
                  :}
                  ;

  exp         ::= var:v ASSIGN exp:e
                  {:
                    RESULT = new ExpAssign(vleft, v, e);
                  :}
                  | exp:e1 PLUS exp:e2
                  {:
                    RESULT = new ExpOp(e1left, e1, ExpOp.PLUS, e2);
                  :}
                  | exp:e1 MINUS exp:e2
                  {:
                    RESULT = new ExpOp(e1left, e1, ExpOp.MINUS, e2);
                  :}
                  | exp:e1 TIMES exp:e2
                  {:
                    RESULT = new ExpOp(e1left, e1, ExpOp.TIMES, e2);
                  :}
                  | exp:e1 OVER exp:e2
                  {:
                    RESULT = new ExpOp(e1left, e1, ExpOp.OVER, e2);
                  :}
                  | exp:e1 LTEQ exp:e2
                  {:
                    RESULT = new ExpOp(e1left, e1, ExpOp.LTEQ, e2);
                  :}
                  | exp:e1 LT exp:e2
                  {:
                    RESULT = new ExpOp(e1left, e1, ExpOp.LT, e2);
                  :}
                  | exp:e1 GT exp:e2
                  {:
                    RESULT = new ExpOp(e1left, e1, ExpOp.GT, e2);
                  :}
                  | exp:e1 GTEQ exp:e2
                  {:
                    RESULT = new ExpOp(e1left, e1, ExpOp.GTEQ, e2);
                  :}
                  | exp:e1 EQ exp:e2
                  {:
                    RESULT = new ExpOp(e1left, e1, ExpOp.EQ, e2);
                  :}
                  | exp:e1 NOTEQ exp:e2
                  {:
                    RESULT = new ExpOp(e1left, e1, ExpOp.NOTEQ, e2);
                  :}
                  | factor:f
                  {:
                    RESULT = f;
                  :}
                  ;

  var         ::= ID:i
                  {:
                    RESULT = new ExpVar(ileft, i, null);
                  :}
                  | ID:i LBRACKET exp:e RBRACKET
                  {:
                    RESULT = new ExpVar(ileft, i, e);
                  :}
                  ;

  factor      ::= LPAREN exp:e RPAREN
                  {:
                    RESULT = e;
                  :}
                  | var:v
                  {:
                    RESULT = v;
                  :}
                  | call:c
                  {:
                    RESULT = c;
                  :}
                  | NUM:n
                  {:
                    RESULT = new ExpConst(nleft, Integer.parseInt(n.toString()));
                  :}
                  ;

  call        ::= ID:i LPAREN args:a RPAREN
                  {:
                    RESULT = new ExpCall(ileft, i, a);
                  :}
                  ;

  args        ::= arg_list:a
                  {:
                    RESULT = a;
                  :}
                  | //empty
                  {:
                    RESULT = null;
                  :}
                  ;

  arg_list    ::= arg_list:a COMMA exp:e
                  {:
                    ExpList t = a;
                    if (a == null) {
                      a = new ExpList(e, null);
                      RESULT = a;
                    }
                    else{
                      while(t.tail != null)
                        t = t.tail;
                      t.tail = new ExpList(e, null);
                      RESULT = a;
                    }
                  :}
                  | exp:e
                  {:
                    RESULT = new ExpList(e, null);
                  :}
                  ;